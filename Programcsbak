using Microsoft.EntityFrameworkCore;
using UjiLab.Data;
using System;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
using UjiLab.Domain.Repositories;
using UjiLab.Domain.Services;
using Microsoft.Extensions.FileProviders;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

var services = builder.Services;

// Add CoRS
services.AddCors();

//string conn = builder.Configuration.GetConnectionString("AppDB");

//services.AddDbContext<AppDbContext>(options => {
//    options.UseMySql(conn, ServerVersion.AutoDetect(conn));
//});

services.AddDbContext<AppDbContext>(options => {
    options.UseNpgsql(builder.Configuration.GetConnectionString("PostgreDB"));
});

// Add Service to DI Container
{
    services.AddScoped<IWilayah, WilayahService>();
    services.AddScoped<IKondisi, KondisiService>();
    services.AddScoped<ILayanan, LayananService>();
    services.AddScoped<IBidangUsaha, BidangUsahaService>();
    services.AddScoped<IMetodeSampling, MetodeSamplingService>();
    services.AddScoped<ITipeUsaha, TipeUsahaService>();
    services.AddScoped<IStatus, StatusService>();
    services.AddScoped<ITipePengajuan, TipePengajuanService>();
    services.AddScoped<IOutputHasil, OutputHasilService>();
    services.AddScoped<IClient, ClientService>();
    services.AddScoped<IBakuMutu, BakuMutuService>();
    services.AddScoped<IParameter, ParameterService>();
    services.AddScoped<IJenisPengajuan, JenisPengajuanService>();
    services.AddScoped<ITipeLokasi, TipeLokasiService>();
}

services.AddAuthentication(options => {
    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
})

.AddCookie(options => {
    options.LoginPath = "/login";
    options.ExpireTimeSpan = TimeSpan.FromMinutes(120);
    options.SlidingExpiration = false;
    options.AccessDeniedPath = "/account/denied";
})

.AddOpenIdConnect(options => {
    options.ClientId = "lab-llhd";
    options.ClientSecret = "598c4780-e90e-4fcc-9b5b-208c02d298e1";

    options.RequireHttpsMetadata = false;
    options.GetClaimsFromUserInfoEndpoint = true;
    options.SaveTokens = true;

    // Use the authorization code flow.
    options.ResponseType = OpenIdConnectResponseType.Code;
    options.AuthenticationMethod = OpenIdConnectRedirectBehavior.RedirectGet;

    // retrieve the identity provider's configuration and spare you from setting
    // the different endpoints URIs or the token validation parameters explicitly.
    options.Authority = "https://localhost:6001/";

    options.Scope.Add("email");
    options.Scope.Add("roles");
    options.Scope.Add("profile");
    

    // Disable the built-in JWT claims mapping feature.
    options.MapInboundClaims = false;

    options.TokenValidationParameters.NameClaimType = "name";
    options.TokenValidationParameters.RoleClaimType = "role";

});

var app = builder.Build();

AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseCors(x => x
    .SetIsOriginAllowed(origin => true)
    .AllowAnyMethod()
    .AllowAnyHeader()
    .AllowCredentials());

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseStaticFiles(new StaticFileOptions()
{
    FileProvider = new PhysicalFileProvider(@"C:\Data\clients"),
    RequestPath = new PathString("/clients")
});

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapDefaultControllerRoute();

app.Run();

public static class Simpanan
{
    public const string ReturnUrl =  "https://localhost:7145/dashboard";
    public const string AuthServer = "https://localhost:6001/Identity/Account/RegisterLLHD/?returnUrl=";
}

public static class Uploads
{
    public const string Path = @"C:\Data";
}
